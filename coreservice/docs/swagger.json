{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample API for demonstrating Swagger with Gin.",
        "title": "Example API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8006",
    "basePath": "/",
    "paths": {
        "/check-token": {
            "get": {
                "description": "Verifies JWT token validity and returns user information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Validate JWT token",
                "responses": {
                    "200": {
                        "description": "Token validation response with user data",
                        "schema": {
                            "$ref": "#/definitions/entity.TypeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid token format",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/daily-task": {
            "get": {
                "description": "Возвращает ежедневную задачу для текущей даты",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Получить ежедневную задачу",
                "responses": {}
            }
        },
        "/elastic/create-index": {
            "get": {
                "description": "Recreates Elasticsearch index and imports all users from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elastic"
                ],
                "summary": "Rebuild user search index",
                "responses": {
                    "200": {
                        "description": "Returns count of indexed users",
                        "schema": {
                            "$ref": "#/definitions/entity.Response"
                        }
                    },
                    "500": {
                        "description": "Elasticsearch operation failed",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/elastic/fuzzy": {
            "post": {
                "description": "Performs a fuzzy search that accounts for typos and similar spellings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elastic"
                ],
                "summary": "Fuzzy search users by name",
                "parameters": [
                    {
                        "description": "Search parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.SearchParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of found users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Elasticsearch error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/elastic/strict": {
            "post": {
                "description": "Performs a case-sensitive exact match search for users by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elastic"
                ],
                "summary": "Search users by exact name",
                "parameters": [
                    {
                        "description": "Search parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.SearchParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of found users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Elasticsearch error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/elastic/wildcard": {
            "post": {
                "description": "Performs a wildcard search for users by name (supports * and ? patterns)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elastic"
                ],
                "summary": "Search users by name using wildcard pattern",
                "parameters": [
                    {
                        "description": "Search parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.SearchParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of found users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Elasticsearch error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/seasons/": {
            "get": {
                "description": "Get a list of all seasons",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seasons"
                ],
                "summary": "Get all seasons",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.SeasonListElement"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/seasons/current": {
            "get": {
                "description": "Returns a list of all seasons with 'current' status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seasons"
                ],
                "summary": "Get current seasons",
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/seasons/planned": {
            "get": {
                "description": "Returns a list of all seasons with 'planned' status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seasons"
                ],
                "summary": "Get planned seasons",
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/seasons/{id}": {
            "get": {
                "description": "Get season information by season ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seasons"
                ],
                "summary": "Get season by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Season ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Season"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/seasons/{id}/leader-board": {
            "get": {
                "description": "Get leaderboard for specific season by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seasons"
                ],
                "summary": "Get season leaderboard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Season ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Leaderboard"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/user/deposit": {
            "post": {
                "description": "Allows authenticated user to deposit funds to their balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Deposit funds to user account",
                "parameters": [
                    {
                        "description": "Deposit amount details",
                        "name": "deposit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Balance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns new balance",
                        "schema": {
                            "$ref": "#/definitions/entity.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid token, negative amount or bad request",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing or invalid token)",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/user/info": {
            "get": {
                "description": "Returns current user's information based on valid JWT token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get authenticated user information",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Invalid token or conversion error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (when token is missing)",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Balance": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10.2
                }
            }
        },
        "entity.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "entity.Leaderboard": {
            "type": "object",
            "properties": {
                "user-id": {
                    "type": "integer"
                },
                "win": {
                    "type": "integer"
                }
            }
        },
        "entity.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "entity.SearchParams": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "entity.Season": {
            "type": "object",
            "properties": {
                "end-date": {
                    "type": "string"
                },
                "fund": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "start-date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.SeasonListElement": {
            "type": "object",
            "properties": {
                "season-id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.TypeResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "login": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "win-rate": {
                    "type": "number"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "login": {
                    "type": "string"
                },
                "win-rate": {
                    "type": "number"
                }
            }
        }
    }
}
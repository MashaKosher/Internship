// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task_status.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addReferal = `-- name: AddReferal :one
INSERT INTO task_status_tbl (task_date, user_id, referals)
VALUES ($1, $2, 1)
ON CONFLICT (task_date, user_id)
DO UPDATE SET referals = task_status_tbl.referals + 1
RETURNING referals
`

type AddReferalParams struct {
	TaskDate pgtype.Date
	UserID   int32
}

func (q *Queries) AddReferal(ctx context.Context, arg AddReferalParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, addReferal, arg.TaskDate, arg.UserID)
	var referals pgtype.Int4
	err := row.Scan(&referals)
	return referals, err
}

const addWin = `-- name: AddWin :one
INSERT INTO task_status_tbl (task_date, user_id, win)
VALUES ($1, $2, 1)
ON CONFLICT (task_date, user_id)
DO UPDATE SET win = task_status_tbl.win + 1
RETURNING win
`

type AddWinParams struct {
	TaskDate pgtype.Date
	UserID   int32
}

func (q *Queries) AddWin(ctx context.Context, arg AddWinParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, addWin, arg.TaskDate, arg.UserID)
	var win pgtype.Int4
	err := row.Scan(&win)
	return win, err
}

const completeReferalsTask = `-- name: CompleteReferalsTask :exec
UPDATE task_status_tbl 
SET referals_status = TRUE 
WHERE task_date = $1 AND user_id = $2
`

type CompleteReferalsTaskParams struct {
	TaskDate pgtype.Date
	UserID   int32
}

func (q *Queries) CompleteReferalsTask(ctx context.Context, arg CompleteReferalsTaskParams) error {
	_, err := q.db.Exec(ctx, completeReferalsTask, arg.TaskDate, arg.UserID)
	return err
}

const completeWinTask = `-- name: CompleteWinTask :exec
UPDATE task_status_tbl 
SET win_status = TRUE 
WHERE task_date = $1 AND user_id = $2
`

type CompleteWinTaskParams struct {
	TaskDate pgtype.Date
	UserID   int32
}

func (q *Queries) CompleteWinTask(ctx context.Context, arg CompleteWinTaskParams) error {
	_, err := q.db.Exec(ctx, completeWinTask, arg.TaskDate, arg.UserID)
	return err
}

const referalsTaskStatus = `-- name: ReferalsTaskStatus :one
SELECT referals_status FROM task_status_tbl WHERE task_date = $1 AND user_id = $2
`

type ReferalsTaskStatusParams struct {
	TaskDate pgtype.Date
	UserID   int32
}

func (q *Queries) ReferalsTaskStatus(ctx context.Context, arg ReferalsTaskStatusParams) (bool, error) {
	row := q.db.QueryRow(ctx, referalsTaskStatus, arg.TaskDate, arg.UserID)
	var referals_status bool
	err := row.Scan(&referals_status)
	return referals_status, err
}

const winTaskStatus = `-- name: WinTaskStatus :one
SELECT win_status FROM task_status_tbl WHERE task_date = $1 AND user_id = $2
`

type WinTaskStatusParams struct {
	TaskDate pgtype.Date
	UserID   int32
}

func (q *Queries) WinTaskStatus(ctx context.Context, arg WinTaskStatusParams) (bool, error) {
	row := q.db.QueryRow(ctx, winTaskStatus, arg.TaskDate, arg.UserID)
	var win_status bool
	err := row.Scan(&win_status)
	return win_status, err
}

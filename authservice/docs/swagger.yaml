basePath: /
definitions:
  entity.Error:
    properties:
      error:
        type: string
    type: object
  entity.Password:
    properties:
      new-password:
        type: string
    type: object
  entity.UserInDTO:
    properties:
      password:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  entity.UserOutDTO:
    properties:
      access:
        type: string
      id:
        type: integer
      refresh:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.UserSignUpInDTO:
    properties:
      password:
        minLength: 1
        type: string
      referal-id:
        minimum: 0
        type: integer
      username:
        minLength: 1
        type: string
    required:
    - password
    - referal-id
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: Auth server API
  title: Auth service
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Changes password for authenticated user. Requires valid access
        token in cookies.
      parameters:
      - description: New password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Password'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens are valid, returns user data
          schema:
            $ref: '#/definitions/entity.UserInDTO'
        "400":
          description: Bad Request - Missing or empty tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized - Invalid or expired tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden - Token validation failed
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Change user password
      tags:
      - Change Password
  /auth/check:
    get:
      description: Verifies both access and refresh JWT tokens from cookies. Returns
        user data if refresh token is valid. Clears cookies on any error.
      produces:
      - application/json
      responses:
        "200":
          description: Tokens are valid, returns user data
          schema:
            $ref: '#/definitions/entity.UserInDTO'
        "400":
          description: Bad Request - Missing or empty tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized - Invalid or expired tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden - Token validation failed
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Verify both tokens
      tags:
      - Check Token
  /auth/check/access:
    get:
      description: Verifies JWT refresh token from cookies and returns user data if
        valid. Clears cookies on any error.
      produces:
      - application/json
      responses:
        "200":
          description: Refresh token is valid
          schema:
            $ref: '#/definitions/entity.UserInDTO'
        "400":
          description: Bad Request - Missing or empty tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized - Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden - Token validation failed
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Verify refresh token
      tags:
      - Check Token
  /auth/check/refresh:
    get:
      description: Verifies JWT refresh token from cookies and returns user data if
        valid. Clears cookies on any error.
      produces:
      - application/json
      responses:
        "200":
          description: Refresh token is valid
          schema:
            $ref: '#/definitions/entity.UserInDTO'
        "400":
          description: Bad Request - Missing or empty tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized - Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden - Token validation failed
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Verify refresh token
      tags:
      - Check Token
  /auth/delete:
    delete:
      consumes:
      - application/json
      description: Permanently deletes user account after validating both access and
        refresh tokens. Clears all auth cookies on any error.
      produces:
      - application/json
      responses:
        "200":
          description: Tokens are valid, returns user data
          schema:
            $ref: '#/definitions/entity.UserInDTO'
        "400":
          description: Bad Request - Missing or empty tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized - Invalid or expired tokens
          schema:
            $ref: '#/definitions/entity.Error'
        "403":
          description: Forbidden - Token validation failed
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Delete user account
      tags:
      - User
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT tokens in cookies and response
        body
      parameters:
      - description: Login request body
        in: body
        name: entity.UserInDTO
        required: true
        schema:
          $ref: '#/definitions/entity.UserInDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          headers:
            Set-Cookie:
              description: refresh_token=JWT_TOKEN; Path=/; HttpOnly
              type: string
          schema:
            $ref: '#/definitions/entity.UserOutDTO'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/entity.Error'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: User login
      tags:
      - Login
  /auth/sign-up/admin:
    post:
      consumes:
      - application/json
      description: Creates a new user account with Admin privileges (requires special
        permissions)
      parameters:
      - description: Admin registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserSignUpInDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Admin successfully registered
          schema:
            $ref: '#/definitions/entity.UserInDTO'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/entity.Error'
        "401":
          description: Unauthorized - Only existing admins can create new admins
          schema:
            $ref: '#/definitions/entity.Error'
        "409":
          description: Conflict - Username already exists
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Register new admin
      tags:
      - Sign Up
  /auth/sign-up/user:
    post:
      consumes:
      - application/json
      description: Creates a new user account with default User role
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserSignUpInDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered
          schema:
            $ref: '#/definitions/entity.UserInDTO'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/entity.Error'
        "409":
          description: Conflict - Username already exists
          schema:
            $ref: '#/definitions/entity.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Error'
      summary: Register new user
      tags:
      - Sign Up
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"

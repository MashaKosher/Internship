basePath: /
definitions:
  entity.Password:
    properties:
      new-password:
        type: string
    type: object
  entity.Response:
    properties:
      message:
        type: string
    type: object
  entity.Role:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRole
    - AdminRole
  entity.User:
    properties:
      password:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  entity.UserResponse:
    properties:
      access-token:
        type: string
      id:
        type: integer
      refresh-token:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
      token-type:
        type: string
      username:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: Auth server API
  title: Auth service
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Updates authenticated user's password after validation
      parameters:
      - description: New password details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Password'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Change user password
      tags:
      - Change Password
  /auth/check-token:
    get:
      description: Verifying access, extract sub and returns Token status. Clears
        the Cookies, if there any error
      produces:
      - application/json
      responses:
        "200":
          description: Access Token is Valid
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: Verifying access Token
      tags:
      - Token
  /auth/login:
    post:
      consumes:
      - application/json
      description: Returns a message indicating the login endpoint
      parameters:
      - description: Login request body
        in: body
        name: entity.User
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully logged
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: User login
      tags:
      - Login
  /auth/refresh:
    get:
      description: Verifying access, extract sub and returns Token status. Clears
        the Cookies, if there any error
      produces:
      - application/json
      responses:
        "200":
          description: Refresh Token is Valid
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: Verifying refresh Token and returning Access
      tags:
      - Token
  /auth/sign-up/admin:
    post:
      consumes:
      - application/json
      description: Returns a message indicating the sign-up endpoint
      parameters:
      - description: Sign up request body
        in: body
        name: entity.User
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully registered
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: Sign up user
      tags:
      - SignUp
  /auth/sign-up/user:
    post:
      consumes:
      - application/json
      description: Returns a message indicating the sign-up endpoint
      parameters:
      - description: Sign up request body
        in: body
        name: entity.User
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully registered
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: Sign up user
      tags:
      - SignUp
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"

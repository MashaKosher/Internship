{
    "swagger": "2.0",
    "info": {
        "description": "Auth server API",
        "title": "Auth service",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Changes password for authenticated user. Requires valid access token in cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Change Password"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "New password data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Password"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully changed",
                        "schema": {
                            "$ref": "#/definitions/entity.UserInDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Password doesn't meet requirements",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/auth/check/access": {
            "get": {
                "description": "Verifies JWT refresh token from cookies and returns user data if valid. Clears cookies on any error.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Check Token"
                ],
                "summary": "Verify refresh token",
                "responses": {
                    "200": {
                        "description": "Refresh token is valid",
                        "schema": {
                            "$ref": "#/definitions/entity.UserInDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Token validation failed",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/auth/check/refresh": {
            "get": {
                "description": "Verifies JWT refresh token from cookies and returns user data if valid. Clears cookies on any error.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Check Token"
                ],
                "summary": "Verify refresh token",
                "responses": {
                    "200": {
                        "description": "Refresh token is valid",
                        "schema": {
                            "$ref": "#/definitions/entity.UserInDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Token validation failed",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates user and returns JWT tokens in cookies and response body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login request body",
                        "name": "entity.UserInDTO",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserInDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/entity.UserOutDTO"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "refresh_token=JWT_TOKEN; Path=/; HttpOnly"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/auth/sign-up/admin": {
            "post": {
                "description": "Creates a new user account with Admin privileges (requires special permissions)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign Up"
                ],
                "summary": "Register new admin",
                "parameters": [
                    {
                        "description": "Admin registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Admin successfully registered",
                        "schema": {
                            "$ref": "#/definitions/entity.UserInDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Only existing admins can create new admins",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username already exists",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        },
        "/auth/sign-up/user": {
            "post": {
                "description": "Creates a new user account with default User role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign Up"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered",
                        "schema": {
                            "$ref": "#/definitions/entity.UserInDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username already exists",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "entity.Password": {
            "type": "object",
            "properties": {
                "new-password": {
                    "type": "string"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 1
                },
                "username": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "entity.UserInDTO": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 1
                },
                "username": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "entity.UserOutDTO": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "refresh": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}
basePath: /
definitions:
  entity.DBDailyTasks:
    properties:
      game-task-reward:
        example: 10
        minimum: 0
        type: integer
      games-amount:
        example: 5
        minimum: 0
        type: integer
      referals-amount:
        example: 10
        minimum: 0
        type: integer
      referals-task-reward:
        example: 10
        minimum: 0
        type: integer
    type: object
  entity.DailyTasks:
    properties:
      game-task-reward:
        example: 10
        type: integer
      games-amount:
        example: 5
        type: integer
      referals-amount:
        example: 10
        type: integer
      referals-task-reward:
        example: 10
        type: integer
      task-date:
        example: "2023-05-15T00:00:00Z"
        type: string
    type: object
  entity.DetailSeasonJson:
    properties:
      end-date:
        example: 31-08-2034
        format: date
        type: string
      end-time:
        example: 01-20-30
        type: string
      fund:
        example: 5000
        minimum: 0
        type: integer
      start-date:
        example: 01-06-2024
        format: date
        type: string
      start-time:
        example: 00-20-30
        type: string
    required:
    - end-date
    - end-time
    - start-date
    - start-time
    type: object
  entity.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  entity.Response:
    properties:
      message:
        type: string
    type: object
  entity.Season:
    properties:
      end-date:
        type: string
      fund:
        type: integer
      start-date:
        type: string
    type: object
  entity.SettingsJson:
    properties:
      lose-amount:
        example: 5.97
        minimum: 0
        type: number
      waiting-time:
        example: 3
        minimum: 0
        type: integer
      win-amount:
        example: 10.05
        minimum: 0
        type: number
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8004
info:
  contact: {}
  description: Admin server API
  title: Admin service
  version: "1.0"
paths:
  /daily-tasks:
    delete:
      consumes:
      - application/json
      description: Delete daily tasks for the current date
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted today's tasks
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: No token or Invalid data
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Response'
        "403":
          description: User is not admin
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Record not found in DB
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Delete today's daily tasks
      tags:
      - DailyTasks
    get:
      consumes:
      - application/json
      description: Retrieve the daily task for the current date
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved today's task
          schema:
            $ref: '#/definitions/entity.DailyTasks'
        "400":
          description: No token
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Response'
        "403":
          description: User is not admin
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Record not found in DB
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Get today's daily task
      tags:
      - DailyTasks
    post:
      consumes:
      - application/json
      description: Create a new set of daily tasks for the current date
      parameters:
      - description: Daily tasks data
        in: body
        name: tasks
        required: true
        schema:
          $ref: '#/definitions/entity.DBDailyTasks'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created today's task
          schema:
            $ref: '#/definitions/entity.DailyTasks'
        "400":
          description: No token or Invalid data
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Response'
        "403":
          description: User is not admin
          schema:
            $ref: '#/definitions/entity.Response'
        "409":
          description: 'Conflict: DailyTask already exists'
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Create daily tasks
      tags:
      - DailyTasks
  /deatil-plan:
    post:
      consumes:
      - application/json
      description: Handles season planning request and verifies user admin rights
      parameters:
      - description: Season information
        in: body
        name: season
        required: true
        schema:
          $ref: '#/definitions/entity.DetailSeasonJson'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created season plan
          schema:
            $ref: '#/definitions/entity.DetailSeasonJson'
        "400":
          description: No token or Invalid data
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Response'
        "403":
          description: User is not admin
          schema:
            $ref: '#/definitions/entity.Response'
        "409":
          description: 'Conflict: Seasons are crossing'
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Season detailed planning
      tags:
      - Season Planning
  /seasons:
    get:
      consumes:
      - application/json
      description: Retrieve the list of all available seasons
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all seasons
          schema:
            items:
              $ref: '#/definitions/entity.Season'
            type: array
        "400":
          description: No token or Invalid data
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Response'
        "403":
          description: User is not admin
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Get all seasons
      tags:
      - Season Planning
  /settings:
    get:
      consumes:
      - application/json
      description: Retrieve the game configuration settings for the current user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved game settings
          schema:
            $ref: '#/definitions/entity.SettingsJson'
        "400":
          description: No token or Invalid data
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Response'
        "403":
          description: User is not admin
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Get game settings
      tags:
      - Settings
    put:
      consumes:
      - application/json
      description: Update game configuration settings for authenticated user
      parameters:
      - description: Game settings object
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/entity.SettingsJson'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated settings
          schema:
            $ref: '#/definitions/entity.DetailSeasonJson'
        "400":
          description: No token or Invalid data
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/entity.Response'
        "403":
          description: User is not admin
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Update game settings
      tags:
      - Settings
  /statistic/players:
    get:
      consumes:
      - application/json
      description: Get season statistic
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get season statistic
      tags:
      - Statistic
  /statistic/seasons:
    get:
      consumes:
      - application/json
      description: Get seasons statistic
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get seasons statistic
      tags:
      - Statistic
swagger: "2.0"
